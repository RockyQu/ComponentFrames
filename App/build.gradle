apply plugin: 'com.android.application'

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId rootProject.ext.frame["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }

        // Enabling MultiDex support.
        multiDexEnabled true

        ndk {
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        disable 'MissingTranslation'

        abortOnError false
        checkReleaseBuilds false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    flavorDimensions "ComponentFrames"

    // 多渠道打包
    productFlavors {
        // 默认渠道
        DefaultChannel {
            manifestPlaceholders = [Channel: "ComponentFrames"]

            dimension "ComponentFrames"
        }
    }

    allprojects {
        repositories {
            jcenter()
            maven { url "https://jitpack.io" }
            maven { url 'http://dl.bintray.com/dev-fingerlinks/maven' }
            mavenCentral()
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    if (!isBuildModule.toBoolean()) {
        runtimeOnly project(":Module_Login")
        runtimeOnly project(":Module_User")
    }

    // 注意 ComponentUI 已经依赖 ComponentSDK, 如果业务模块需要公共 UI 组件就依赖 ComponentUI, 如果不需要就只依赖 ComponentSDK 即可
    api project(':ComponentUI')

    // 引入路由注解生成库
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
}
