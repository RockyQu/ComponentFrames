if (isBuildModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        if (isBuildModule.toBoolean()) {
            applicationId rootProject.ext.frame["applicationId"]
        }
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }

        ndk {
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        disable 'MissingTranslation'

        abortOnError false
        checkReleaseBuilds false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
            }
        }
    }

    flavorDimensions "ComponentFrames"

    // 多渠道打包
    productFlavors {
        // 默认渠道
        DefaultChannel {
            manifestPlaceholders = [Channel: "ComponentFrames"]

            dimension "ComponentFrames"
        }
    }

    allprojects {
        repositories {
            jcenter()
            maven { url "https://jitpack.io" }
            maven { url 'http://dl.bintray.com/dev-fingerlinks/maven' }
            mavenCentral()
        }
    }
}

dependencies {
    if (isBuildModule.toBoolean()) {

        annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

        // Tools
        annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

        // Test
        testImplementation rootProject.ext.dependencies["junit"]
        debugImplementation rootProject.ext.dependencies["canary-debug"]
        releaseImplementation rootProject.ext.dependencies["canary-release"]
        testImplementation rootProject.ext.dependencies["canary-release"]
    } else {

        compileOnly rootProject.ext.dependencies["arouter-compiler"]

        // Tools
        compileOnly rootProject.ext.dependencies["butterknife-compiler"]
        
        // Test
        compileOnly rootProject.ext.dependencies["junit"]
        compileOnly rootProject.ext.dependencies["canary-debug"]
        compileOnly rootProject.ext.dependencies["canary-release"]
        compileOnly rootProject.ext.dependencies["canary-release"]
    }
}